---
import { getTasks, markTaskAsCompleted, getUser } from '../utils/api.js';

let tasks = [];
let errorMessage = '';

// Fetch tasks and user data
async function initialize() {
  try {
    tasks = await getTasks();
    const user = await getUser();

    if (user && user.telegramId) {
      localStorage.setItem('telegramId', user.telegramId);
      console.log('telegramId stored in localStorage:', user.telegramId);
    } else {
      console.error('Failed to fetch user or missing telegramId.');
    }
  } catch (error) {
    console.error('Error initializing app:', error);
    errorMessage = 'Failed to load tasks or user data. Please try again later.';
  }
}

await initialize();
---

<div class="relative pt-5 pb-10">
  <h1 class="pl-6 mt-2 text-white text-2xl font-bold">Available Tasks</h1>

  {errorMessage ? (
    <p class="text-white mt-4 text-lg">{errorMessage}</p>
  ) : (
    <div class="w-full overflow-x-auto py-4 task-slider flex space-x-4 items-stretch px-4 scroll-snap-x">
      {tasks.length === 0 ? (
        <p class="text-white mt-4 ml-auto text-lg">No tasks available at the moment.</p>
      ) : (
        tasks.map((task) => (
          <div
            key={task._id}
            class="flex-shrink-0 w-44 h-64 bg-neutral-800/75 rounded-3xl shadow-sm shadow-lime-300/25 p-4 scroll-snap-align-start flex flex-col justify-between"
          >
            <div>
              <h2 class="text-xl font-semibold text-white">{task.taskName}</h2>
              <p class="text-white/35 text-sm mt-2">{task.xpReward} XP</p>
            </div>
            <button
              data-task-link={task.link}
              data-task-id={task._id}
              class="task-button bg-white text-neutral-950 font-semibold px-4 py-4 rounded-xl mt-4 w-full"
            >
              Begin Task
            </button>
          </div>
        ))
      )}
    </div>
  )}
</div>

<!-- Task completion modal -->
<div id="taskConfirmationModal" class="modal hidden fixed inset-0 bg-neutral-900/50 flex items-center justify-center">
  <div class="bg-white rounded-lg p-6 max-w-sm w-full">
    <h2 class="text-lg font-semibold text-neutral-950 mb-4">Task Verification</h2>
    <p class="text-neutral-700 mb-4" id="dialogMessage">
      You have successfully completed the task. You can now verify it.
    </p>
    <button id="modalConfirmButton" class="bg-lime-500 text-white font-semibold px-4 py-2 rounded-md w-full">
      OK
    </button>
  </div>
</div>

<style>
  .modal {
    display: none;
  }
  .hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('taskConfirmationModal');
    const confirmButton = document.getElementById('modalConfirmButton');

    document.querySelectorAll('.task-button').forEach((button) => {
      button.addEventListener('click', async (event) => {
        const taskLink = event.target.getAttribute('data-task-link');
        const taskId = event.target.getAttribute('data-task-id');

        if (event.target.textContent === 'Verify Task') {
          try {
            await markTaskAsCompleted(taskId);
            removeTaskFromList(taskId);
            showModal(modal);
          } catch (error) {
            console.error('Error marking task as completed:', error);
          }
          return;
        }

        // Open the task link and change button text
        window.open(taskLink, '_blank');
        event.target.textContent = 'Verify Task';
        event.target.classList.replace('bg-white', 'bg-lime-400');
        event.target.removeAttribute('data-task-link');
      });
    });

    confirmButton.addEventListener('click', () => {
      modal.classList.add('hidden');
    });

    // Helper: Show modal
    function showModal(modal) {
      modal?.classList.remove('hidden');
    }

    // Helper: Remove completed task
    function removeTaskFromList(taskId) {
      const taskElement = document.querySelector(`button[data-task-id="${taskId}"]`)?.closest('div');
      taskElement?.remove();
    }
  });
</script>
